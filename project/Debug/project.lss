
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a65  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000396  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001be  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d1       	rcall	.+570    	; 0x2fe <main>
  c4:	4d c1       	rjmp	.+666    	; 0x360 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveTick>:


//SPI COMMUNICATION STATE MACHINE
void SPI_SlaveTick(){
	
	button = ~PIND & 0x0F;
  c8:	89 b1       	in	r24, 0x09	; 9
  ca:	80 95       	com	r24
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <button>
	
	switch(SPI_State){
  d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <SPI_State>
  d6:	88 23       	and	r24, r24
  d8:	11 f0       	breq	.+4      	; 0xde <SPI_SlaveTick+0x16>
		SPI_State = Receive_data;
		break;
		default:
		break;
	}
	switch(SPI_State){
  da:	81 11       	cpse	r24, r1
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <SPI_SlaveTick+0x2a>
		case Receive_data:
		PORTA = receiveData;
  de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <receiveData>
  e2:	82 b9       	out	0x02, r24	; 2
		
		if ( button == 0x01 ){
  e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <button>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f4       	brne	.+6      	; 0xf2 <SPI_SlaveTick+0x2a>
			SPDR = 0x0F;
  ec:	8f e0       	ldi	r24, 0x0F	; 15
  ee:	8e bd       	out	0x2e, r24	; 46
			PORTA |= 0x08;
  f0:	13 9a       	sbi	0x02, 3	; 2
  f2:	08 95       	ret

000000f4 <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 102:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 106:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tasksNum>
 10a:	88 23       	and	r24, r24
 10c:	09 f4       	brne	.+2      	; 0x110 <TimerISR+0x1c>
 10e:	53 c0       	rjmp	.+166    	; 0x1b6 <TimerISR+0xc2>
 110:	80 e0       	ldi	r24, 0x00	; 0
        if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 112:	1b e0       	ldi	r17, 0x0B	; 11
 114:	c0 91 0b 01 	lds	r28, 0x010B	; 0x80010b <tasks>
 118:	d0 91 0c 01 	lds	r29, 0x010C	; 0x80010c <tasks+0x1>
 11c:	18 9f       	mul	r17, r24
 11e:	c0 0d       	add	r28, r0
 120:	d1 1d       	adc	r29, r1
 122:	11 24       	eor	r1, r1
 124:	4d 81       	ldd	r20, Y+5	; 0x05
 126:	5e 81       	ldd	r21, Y+6	; 0x06
 128:	6f 81       	ldd	r22, Y+7	; 0x07
 12a:	78 85       	ldd	r23, Y+8	; 0x08
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	ab 81       	ldd	r26, Y+3	; 0x03
 132:	bc 81       	ldd	r27, Y+4	; 0x04
 134:	48 17       	cp	r20, r24
 136:	59 07       	cpc	r21, r25
 138:	6a 07       	cpc	r22, r26
 13a:	7b 07       	cpc	r23, r27
 13c:	b0 f0       	brcs	.+44     	; 0x16a <TimerISR+0x76>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
 13e:	88 81       	ld	r24, Y
 140:	e9 85       	ldd	r30, Y+9	; 0x09
 142:	fa 85       	ldd	r31, Y+10	; 0x0a
 144:	08 2e       	mov	r0, r24
 146:	00 0c       	add	r0, r0
 148:	99 0b       	sbc	r25, r25
 14a:	09 95       	icall
 14c:	88 83       	st	Y, r24
            tasks[i].elapsedTime = 0;
 14e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 152:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <tasks>
 156:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <tasks+0x1>
 15a:	18 9f       	mul	r17, r24
 15c:	e0 0d       	add	r30, r0
 15e:	f1 1d       	adc	r31, r1
 160:	11 24       	eor	r1, r1
 162:	15 82       	std	Z+5, r1	; 0x05
 164:	16 82       	std	Z+6, r1	; 0x06
 166:	17 82       	std	Z+7, r1	; 0x07
 168:	10 86       	std	Z+8, r1	; 0x08
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
 16a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 16e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <tasks>
 172:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <tasks+0x1>
 176:	18 9f       	mul	r17, r24
 178:	e0 0d       	add	r30, r0
 17a:	f1 1d       	adc	r31, r1
 17c:	11 24       	eor	r1, r1
 17e:	c5 80       	ldd	r12, Z+5	; 0x05
 180:	d6 80       	ldd	r13, Z+6	; 0x06
 182:	e7 80       	ldd	r14, Z+7	; 0x07
 184:	f0 84       	ldd	r15, Z+8	; 0x08
 186:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 18a:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 18e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 192:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 196:	4c 0d       	add	r20, r12
 198:	5d 1d       	adc	r21, r13
 19a:	6e 1d       	adc	r22, r14
 19c:	7f 1d       	adc	r23, r15
 19e:	45 83       	std	Z+5, r20	; 0x05
 1a0:	56 83       	std	Z+6, r21	; 0x06
 1a2:	67 83       	std	Z+7, r22	; 0x07
 1a4:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
    static unsigned char i;
    for (i = 0; i < tasksNum; i++) { 
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tasksNum>
 1b0:	89 17       	cp	r24, r25
 1b2:	08 f4       	brcc	.+2      	; 0x1b6 <TimerISR+0xc2>
 1b4:	af cf       	rjmp	.-162    	; 0x114 <TimerISR+0x20>
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
            tasks[i].elapsedTime = 0;
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
    }
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	08 95       	ret

000001c6 <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tasksPeriodCntDown>
 1f0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <tasksPeriodCntDown+0x1>
 1f4:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <tasksPeriodCntDown+0x2>
 1f8:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <tasksPeriodCntDown+0x3>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tasksPeriodCntDown>
 206:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tasksPeriodCntDown+0x1>
 20a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <tasksPeriodCntDown+0x2>
 20e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 212:	89 2b       	or	r24, r25
 214:	8a 2b       	or	r24, r26
 216:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 218:	89 f4       	brne	.+34     	; 0x23c <__vector_13+0x76>
		tasksPeriodCntDown = tasksPeriodGCD;
 21a:	6c df       	rcall	.-296    	; 0xf4 <TimerISR>
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 220:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 224:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 228:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 22c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tasksPeriodCntDown>
 230:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tasksPeriodCntDown+0x1>
 234:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <tasksPeriodCntDown+0x2>
 238:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <tasksPeriodCntDown+0x3>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0b be       	out	0x3b, r0	; 59
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 262:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 266:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 26e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 272:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <tasksPeriodCntDown>
 276:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <tasksPeriodCntDown+0x1>
 27a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tasksPeriodCntDown+0x2>
 27e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <tasksPeriodCntDown+0x3>
 282:	08 95       	ret

00000284 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 284:	8b e0       	ldi	r24, 0x0B	; 11
 286:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
					// Thus TCCR1B = 00001011 or 0x0B
					// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 28a:	8d e7       	ldi	r24, 0x7D	; 125
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 292:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

#if defined (__AVR_ATmega1284__)
    TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
#else
    TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
#endif

	// Initialize avr counter
	TCNT1 = 0;
 29c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ac:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2b0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2b4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tasksPeriodCntDown>
 2b8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tasksPeriodCntDown+0x1>
 2bc:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <tasksPeriodCntDown+0x2>
 2c0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 2c4:	8f b7       	in	r24, 0x3f	; 63
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	8f bf       	out	0x3f, r24	; 63
 2ca:	08 95       	ret

000002cc <SPI_ServantInit>:
enum SPI_STATES { Receive_data } SPI_State;

// Servant code
void SPI_ServantInit(void) {
	// set DDRB to have MISO line as output and MOSI, SCK, and SS as input
	DDRB = 0x40; PORTB = 0xBF;
 2cc:	80 e4       	ldi	r24, 0x40	; 64
 2ce:	84 b9       	out	0x04, r24	; 4
 2d0:	8f eb       	ldi	r24, 0xBF	; 191
 2d2:	85 b9       	out	0x05, r24	; 5
	// set SPCR register to enable SPI and enable SPI interrupt (pg. 168)
	SPCR |= (1<<SPE) | (1<<SPIE);
 2d4:	8c b5       	in	r24, 0x2c	; 44
 2d6:	80 6c       	ori	r24, 0xC0	; 192
 2d8:	8c bd       	out	0x2c, r24	; 44
	// make sure global interrupts are enabled on SREG register (pg. 9)
	SREG = 0x80;
 2da:	80 e8       	ldi	r24, 0x80	; 128
 2dc:	8f bf       	out	0x3f, r24	; 63
 2de:	08 95       	ret

000002e0 <__vector_19>:
}


ISR(SPI_STC_vect) { // this is enabled in with the SPCR register’s “SPI
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
	// Interrupt Enable”
	// SPDR contains the received data, e.g. unsigned char receivedData =
	//PORTA = 0x0f;
	receiveData = SPDR;
 2ec:	8e b5       	in	r24, 0x2e	; 46
 2ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <receiveData>
	// SPDR;
}
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
	}
}


//MAIN FUNCTION
int main( ){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	2b 97       	sbiw	r28, 0x0b	; 11
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61

	DDRA = 0xFF; PORTA = 0x00; // LCD control lines
 312:	1f ef       	ldi	r17, 0xFF	; 255
 314:	11 b9       	out	0x01, r17	; 1
 316:	12 b8       	out	0x02, r1	; 2
	DDRD = 0x00; PORTD = 0xFF;
 318:	1a b8       	out	0x0a, r1	; 10
	
	SPI_ServantInit();
 31a:	1b b9       	out	0x0b, r17	; 11
	
	tasksNum = 1; // declare number of tasks
 31c:	d7 df       	rcall	.-82     	; 0x2cc <SPI_ServantInit>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksNum>
	task tsks[1]; // initialize the task array
	tasks = tsks; // set the task array
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tasks+0x1>
 32c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tasks>
	
	
	// define tasks
	unsigned char i=0; // task counter
	tasks[i].state = -1;
	tasks[i].period = 100;
 330:	19 83       	std	Y+1, r17	; 0x01
 332:	84 e6       	ldi	r24, 0x64	; 100
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	8a 83       	std	Y+2, r24	; 0x02
 33c:	9b 83       	std	Y+3, r25	; 0x03
 33e:	ac 83       	std	Y+4, r26	; 0x04
	tasks[i].elapsedTime = tasks[i].period;
 340:	bd 83       	std	Y+5, r27	; 0x05
 342:	8e 83       	std	Y+6, r24	; 0x06
 344:	9f 83       	std	Y+7, r25	; 0x07
 346:	a8 87       	std	Y+8, r26	; 0x08
	tasks[i].TickFct = &SPI_SlaveTick;
 348:	b9 87       	std	Y+9, r27	; 0x09
 34a:	84 e6       	ldi	r24, 0x64	; 100
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	9b 87       	std	Y+11, r25	; 0x0b
	
	TimerSet(100); // value set should be GCD of all tasks
 350:	8a 87       	std	Y+10, r24	; 0x0a
 352:	64 e6       	ldi	r22, 0x64	; 100
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
	TimerOn();
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	83 df       	rcall	.-250    	; 0x262 <TimerSet>
 35c:	93 df       	rcall	.-218    	; 0x284 <TimerOn>
 35e:	ff cf       	rjmp	.-2      	; 0x35e <main+0x60>

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
